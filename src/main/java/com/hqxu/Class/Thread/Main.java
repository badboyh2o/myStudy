package com.hqxu.Class.Thread;


/**
 * 一、Java多线程
 * 
 * 
 * 1.互斥
 * 
 *  1.1 资源的访问方式
 *          互斥共享：一个资源，一个时间段内只允许一个线程访问。
 *          同时共享访问：一个资源，一个时间段内，允许多个线程"同时"(交替)访问。（不必等待释放）
 *  
 *          临界资源：一个时间段内只允许一个线程访问的资源。
 *          
 *  1.2 互斥机制：一个资源，一个时间段内只允许一个线程访问，其他线程想问访问，必须等待占有资源的线程释放。
 *            当访问资源的线程释放资源后，其他线程才可访问(或者原线程继续访问，取决于CPU调度)。
 *  
 *  1.3 互斥锁 —— 互斥的实现
 *          synchronized 方法 {}
 *          同步代码块 synchronized(this){}
 *          重入锁 new ReentrantLock().lock();
 *          
 * 
 *  
 * 2.同步
 *   2.1 同步机制：与互斥机制不同，同步机制是指 多个线程访问临界资源，强调先后顺序。
 *        如 线程A访问临界资源，A线程阻塞，由其他线程访问，此时线程A不可能再获取到CPU，只有当其他线程A，A才可能获取到CPU。
 *        
 *        同步依赖于互斥。
 * 
 *   2.2 线程间通信
 * 
 *      线程的等待和唤醒
 *      wait()
 *      notify()
 *      notifyAll()
 *      
 *  
 *   2.3.死锁
 *      各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进。（至少有两个进程都处于阻塞）
 *   
 * 
 *
 */
public class Main {
    
    

}
